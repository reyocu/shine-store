// payment.js - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Crypto Bot –ø–ª–∞—Ç–µ–∂–∞
async function processCryptoPayment(amount) {
    showNotification('üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    setTimeout(() => {
        showCryptoPaymentModal(amount);
    }, 1000);
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è Crypto Bot –æ–ø–ª–∞—Ç—ã
function showCryptoPaymentModal(amount) {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'flex';
    modal.innerHTML = `
        <div class="modal-content">
            <h3>üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Crypto Bot</h3>
            <div class="payment-info">
                <div class="amount-display">
                    <strong>–°—É–º–º–∞:</strong> ${amount} USDT
                </div>
                <div class="payment-instructions">
                    <p><strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</strong></p>
                    <ol>
                        <li>–û—Ç–∫—Ä–æ–π—Ç–µ @CryptoBot –≤ Telegram</li>
                        <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/start</code></li>
                        <li>–í—ã–±–µ—Ä–∏—Ç–µ "Crypto Pay"</li>
                        <li>–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–≤–æ–π—Å –Ω–∞ ${amount} USDT</li>
                        <li>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"</li>
                    </ol>
                </div>
                <div class="payment-buttons">
                    <button onclick="openCryptoBot()" class="payment-btn crypto-pay">
                        üì± –û—Ç–∫—Ä—ã—Ç—å Crypto Bot
                    </button>
                    <button onclick="simulateCryptoPayment(${amount})" class="payment-btn check-pay">
                        ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
                    </button>
                    <button onclick="closeCurrentModal()" class="modal-cancel-btn">
                        ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
                <div class="payment-status" id="paymentStatus">
                    ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// –û—Ç–∫—Ä—ã—Ç—å Crypto Bot
function openCryptoBot() {
    window.open('https://t.me/CryptoBot', '_blank');
}

// –°–∏–º—É–ª—è—Ü–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function simulateCryptoPayment(amount) {
    const users = JSON.parse(localStorage.getItem('users')) || [];
    const userIndex = users.findIndex(u => u.id === currentUser.id);
    
    if (userIndex !== -1) {
        users[userIndex].balance += amount;
        currentUser.balance += amount;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
        if (!users[userIndex].topups) {
            users[userIndex].topups = [];
        }
        
        users[userIndex].topups.push({
            amount: amount,
            method: 'crypto_bot',
            date: new Date().toISOString(),
            status: 'completed'
        });
        
        localStorage.setItem('users', JSON.stringify(users));
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        
        updateUserInterface();
        loadProducts();
        updateStats();
        
        document.getElementById('paymentStatus').innerHTML = 
            '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.';
        
        showNotification(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} USDT!`);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            closeCurrentModal();
        }, 3000);
    }
}

// –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeCurrentModal() {
    const modal = document.querySelector('.modal');
    if (modal) {
        modal.remove();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)
/*
const CRYPTO_BOT_API = 'https://pay.crypt.bot/api';
const CRYPTO_BOT_TOKEN = '461356:AATCbaohoZfd2swck6qjI9NX0OTBo36qQwU';

async function createRealCryptoInvoice(amount) {
    try {
        const invoiceData = {
            asset: 'USDT',
            amount: amount.toString(),
            description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ shine-store.ru`,
            payload: JSON.stringify({
                userId: currentUser.id,
                type: 'balance_topup'
            })
        };

        const response = await fetch(`${CRYPTO_BOT_API}/createInvoice`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN
            },
            body: JSON.stringify(invoiceData)
        });

        const result = await response.json();
        
        if (result.ok) {
            return result.result.pay_url;
        }
    } catch (error) {
        console.error('Payment error:', error);
    }
    return null;
}
*/